from PIL import Image, ImageFont, ImageDraw
import os
BASE_DIR = os.path.dirname(__file__)  # gets the path to the current .py file
FONT_PATH = os.path.join(BASE_DIR, "Phetsarath-Regular.ttf")
FONT_SIZE = 14
GLYPH_WIDTH = 16
GLYPH_HEIGHT = 16
#OUTPUT_H = "lao_bitmap_font.h"
LAO_UNICODE_RANGE = range(0x0E80, 0x0F00)

def image_to_bits(image):
    pixels = image.load()
    byte_array = []
    for y in range(GLYPH_HEIGHT):
        byte = 0
        bits_filled = 0
        for x in range(GLYPH_WIDTH):
            pix = pixels[x,y]
            bit = 0 if pix == 1 else 1 #checks value of pixel @ location in image (black pixels are 0 in image)
            byte = (byte << 1) | bit #shifts bits to the left and adds new bit
            bits_filled += 1
            if bits_filled == 8:
                byte_array.append(byte) #once 8 bits are encoded we append to the array
                byte = 0
                bits_filled = 0
        if bits_filled > 0:
            byte <<= (8-bits_filled) #if we reach the end of a row and we dont have a complete byte, pad with zeros at end
            byte_array.append(byte)
    return byte_array

font = ImageFont.truetype(FONT_PATH, FONT_SIZE)
for codepoint in LAO_UNICODE_RANGE:
    char = chr(codepoint) #takes codepoint and returns actual symbol
    img = Image.new("1", (GLYPH_WIDTH, GLYPH_HEIGHT), color=1) #create a blank image of correct size
    draw = ImageDraw.Draw(img)
    draw.text((0, 0), char, font=font, fill=0) #drawing the image described by the font

    byte_array = image_to_bits(img)
    print(f"U+{codepoint:04X}:")  
    print(", ".join(f"0x{b:02X}" for b in byte_array), end="")
    print("};")
    #converting to hex string


